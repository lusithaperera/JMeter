name: JMeter Docker Performance Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      script_name:
        description: 'Script name to execute'
        required: true
        type: choice
        default: 'UI_Script.jmx'
        options:
          - 'UI_Script.jmx'
          - 'API_Script.jmx'
          - 'Load_Test.jmx'
      duration:
        description: 'Test duration (in minutes)'
        required: true
        type: string
        default: '5'
      rampup:
        description: 'Ramp-up time (in minutes)'
        required: true
        type: string
        default: '1'
      user_count:
        description: 'Number of concurrent users'
        required: true
        type: number
        default: 1

jobs:
  docker-jmeter-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set default values for push/PR events
      run: |
        if [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
          echo "SCRIPT_NAME=UI_Script.jmx" >> $GITHUB_ENV
          echo "DURATION=5" >> $GITHUB_ENV
          echo "RAMPUP=1" >> $GITHUB_ENV
          echo "USER_COUNT=1" >> $GITHUB_ENV
        else
          echo "SCRIPT_NAME=${{ github.event.inputs.script_name }}" >> $GITHUB_ENV
          echo "DURATION=${{ github.event.inputs.duration }}" >> $GITHUB_ENV
          echo "RAMPUP=${{ github.event.inputs.rampup }}" >> $GITHUB_ENV
          echo "USER_COUNT=${{ github.event.inputs.user_count }}" >> $GITHUB_ENV
        fi

    - name: Create output directories
      run: |
        mkdir -p jmeter/results
        mkdir -p jmeter/reports
        cp ${{ env.SCRIPT_NAME }} jmeter/
        
    - name: Run JMeter Test in Docker
      run: |
        docker run --rm \
          -v "${PWD}:/jmeter" \
          -w /jmeter \
          justb4/jmeter:5.5 \
          -n \
          -t ${{ env.SCRIPT_NAME }} \
          -Jduration=${{ env.DURATION }} \
          -Jrampup=${{ env.RAMPUP }} \
          -Juser_count=${{ env.USER_COUNT }} \
          -l jmeter/results/test-results.jtl \
          -e \
          -o jmeter/reports/html-report
          
    - name: Upload JMeter Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: jmeter-docker-results-${{ github.run_number }}
        path: |
          jmeter/results/*.jtl
          jmeter/reports/html-report/
          
    - name: Check Test Results
      run: |
        if [ -f "jmeter/results/test-results.jtl" ]; then
          if grep -q "false" jmeter/results/test-results.jtl; then
            echo "❌ Test failures found in JMeter results"
            exit 1
          else
            echo "✅ All tests passed successfully"
          fi
        else
          echo "❌ Results file not found"
          exit 1
        fi